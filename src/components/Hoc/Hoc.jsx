import React from 'react';
import Code from "../Code/Code";
import {codeAuth, codeCreateHoc, codeLocal, codeLog, codeState, codeThrowProps} from "./code_examples";

const Hoc = () => {
    return (
        <div>
            <h1>HOС (Higher-Order Components)</h1>
            <div className='content'>
                <p>
                    <b>Higher Order Components (HOC)</b> являются паттерном в библиотеке React, позволяющим повысить
                    переиспользуемость компонентов и управление состоянием. В этой главе мы рассмотрим, зачем они нужны,
                    как их создавать, как прокидывать props, а также какие проблемы они помогают решить.
                </p>
                <p>
                    <b>HOC</b> — это функции высшего порядка, которые принимают компонент и возвращают новый компонент с
                    расширенным функционалом.
                </p>
                <p>
                    Они помогают избежать дублирования кода, управлять состоянием, обеспечивают абстракцию поведения и
                    позволяют добавлять функциональность к компонентам без изменения их кода.
                </p>
                <h3>Проблемы, которые решает HOC</h3>
                <ol>
                    <li>
                        <b>Логическое переиспользование</b>: HOC позволяют выделить общую логику компонентов, такую как
                        обработка аутентификации или получение данных, и применять ее ко множеству компонентов без
                        дублирования кода.
                    </li>
                    <li>
                        <b>Прокинуть дополнительные props</b>: HOC позволяют добавлять или модифицировать props
                        компонентов.
                        Это удобно, например, для передачи данных из контекста или оборачивания компонентов в
                        дополнительные компоненты высшего порядка.
                    </li>
                    <li>
                        <b>Обертывание компонентов</b>: HOC могут использоваться для обертывания компонентов
                        дополнительным
                        функциональным слоем, например, для логирования, манипуляции с состоянием и т.д.
                    </li>
                </ol>
                <p>
                    Создание HOC включает в себя определение функции, которая принимает компонент и возвращает новый
                    компонент.
                </p>
                <Code code={codeCreateHoc}/>
                <h3>Как прокинуть props?</h3>
                <Code code={codeThrowProps}/>
                <h3>Примеры использования HOC</h3>
                <ol>
                    <li>
                        <b>Логирование</b>
                        <p>
                            <Code code={codeLog}/>
                        </p>
                    </li>
                    <li>
                        <b>Аутентификация</b>
                        <p>
                            <Code code={codeAuth}/>
                        </p>
                    </li>
                    <li>
                        <b>Локализация</b>
                        <p>
                            <Code code={codeLocal}/>
                        </p>
                    </li>
                    <li>
                        <b>Управление состоянием</b>
                        <p>
                            <Code code={codeState}/>
                        </p>
                        <p>
                            В этом примере <b>withCounter</b> - это функция высшего порядка компонентов, которая
                            принимает компонент <b>WrappedComponent</b> и возвращает новый компонент, который добавляет
                            состояние count и функцию <b>incrementCount</b>. <b>Counter</b> - это компонент, который
                            отображает текущее значение <b>count</b> и кнопку для увеличения счетчика.
                            <b>CounterWithHOC</b> - это <b>Counter</b>, обернутый в <b>withCounter</b>.<br/>
                            <br/>
                            В итоге, когда ты используешь <b>CounterWithHOC</b> в App, он будет иметь состояние
                            count и функцию <b>incrementCount</b>, добавленные благодаря HOC.
                        </p>
                    </li>
                </ol>
                <p>Higher Order Components предоставляют инструмент <b>для повышения переиспользуемости компонентов</b> и
                    добавления функциональности. При правильном использовании они помогают улучшить структуру и
                    модульность твоего кода в приложении на React.</p>
            </div>
        </div>
    );
};

export default Hoc;