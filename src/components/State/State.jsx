import React from 'react';
import Code from "../Code/Code";
import {
    codeCreateStateClassComp,
    codeCreateStateFuncComp,
    codeImportState, codeUpdateStateClassComp,
    codeUpdateStateFuncComp, codeUseState
} from "./code_examples";
import Counter from "./Counter/Counter";

const State = () => {
    return (
        <div>
            <h1>State</h1>
            <div className='content'>
                <p>При разработке React-приложений состояние (<b>state</b>) играет важную роль. Оно представляет собой
                    данные,
                    которые используются внутри компонента для отслеживания и обновления информации. Состояние позволяет
                    компонентам React быть динамичными и реагировать на изменения данных или взаимодействие
                    пользователя.
                </p>
                <p>
                    В React 16.8 появилась возможность использовать <b>state</b> в функциональных компонентах, путем
                    использования нового хука <b>useState</b>.
                </p>
                <p>
                    Хук <b>useState</b> позволяет функциональным компонентам в React добавлять локальное состояние. Он
                    возвращает возвращает массив с парой значений: текущее значение состояния и функцию для его
                    обновления. При вызове функции обновления, React перерисует компонент с новым значением
                    состояния.<br/>
                    <br/>
                    - <b>state</b>: текущее значение состояния.
                    <br/>
                    - <b>setState</b>: функция для обновления значения состояния.
                </p>
                <Code code={codeImportState}/>
                <h3>
                    Параметры
                </h3>
                <p>
                    <b>initialState</b> (необязательный): начальное значение состояния. Может быть примитивным типом
                    данных, объектом или функцией.
                </p>
                <h3>Создание state</h3>
                <p>
                    Для создания состояния в функциональных компонентах используется хук <b>useState</b>. Он позволяет
                    объявить
                    переменную состояния и ее инициализацию. Например, можно создать состояние для отслеживания текущего
                    счетчика:
                </p>
                <Code code={codeCreateStateFuncComp}/>
                <p>
                    В классовых компонентах состояние хранится в свойстве <b>state</b>. Начальное состояние определяется
                    в
                    конструкторе компонента:
                </p>
                <Code code={codeCreateStateClassComp}/>
                <h3>Обновление состояния</h3>
                <p>
                    Для обновления состояния в функциональных компонентах используется функция <b>setCount</b>, которая
                    является вторым элементом массива, возвращаемого <b>useState</b>. При
                    вызове <b>setCount</b> передается новое
                    значение состояния. React автоматически обновит компонент и перерисует его с новым значением
                    состояния:
                </p>
                <Code code={codeUpdateStateFuncComp}/>
                <p>
                    В классовых компонентах обновление состояния происходит с использованием метода <b>setState</b>. Он
                    принимает объект с обновленными значениями состояния или функцию. React обновит
                    состояние компонента и выполнит его перерисовку:
                </p>
                <Code code={codeUpdateStateClassComp}/>
                <h3>Использование state в компонентах</h3>
                <p>
                    Состояние позволяет компонентам отображать и обновлять данные. Например, состояние может использоваться для отслеживания введенных пользователем значений в форме или для хранения информации, полученной из сервера. Состояние также позволяет реагировать на события и обновлять компонент в соответствии с новыми данными.
                    <br/>
                    Пример использования состояния для отслеживания текущего счетчика и его отображения:
                </p>
                <Code code={codeUseState}/>
                <p>Результат выполнения кода:</p>
                <Counter/>
            </div>
        </div>
    );
};

export default State;