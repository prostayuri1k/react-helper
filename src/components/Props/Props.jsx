import React from 'react';
import Code from "../Code/Code";
import {codeClassProps, codeClassProps2, codeFuncProps, codePassValues} from "./code_examples";

const Props = () => {
    return (
        <div>
            <h1>Props</h1>
            <div className='content'>
                <h3>Что такое пропсы и зачем они нужны</h3>
                <p>
                    Пропсы (сокращение от properties) - это данные, которые передаются в компоненты React для настройки
                    их поведения и внешнего вида. Они позволяют передавать информацию из родительского компонента в
                    дочерний компонент.<br/>
                    <br/>
                    Дочерний компонент может читать эти <b>props</b> и использовать их, например, для вывода данных на
                    экран
                    или для изменения своего поведения.
                </p>
                <h3>Передача пропсов компонентам</h3>
                <p>
                    Пропсы передаются в компоненты в виде атрибутов при их использовании в JSX.
                </p>
                <Code code={codePassValues}/>
                <h3>Доступ к пропсам внутри компонентов</h3>
                <p>
                    В функциональных компонентах пропсы доступны как параметр функции компонента. Например, <b>{`(props) => {...
                }`}</b>.
                </p>
                <Code code={codeFuncProps}/>
                <p>
                    В классовых компонентах пропсы доступны через <b>{`this.props`}</b>.
                    Например, <b>{`this.props.message`}</b>.
                </p>
                <Code code={codeClassProps}/>
                <Code code={codeClassProps2}/>
                <p><b>Props</b> можно использовать для передачи любых данных, включая строки, числа, массивы, объекты и
                    функции.
                </p>
                <p>
                    Пропсы в React играют важную роль в передаче данных и настройке компонентов. Они позволяют создавать
                    переиспользуемые компоненты. Правильное использование пропсов способствует лучшей организации кода и
                    разделению ответственности между компонентами.
                </p>
            </div>
        </div>
    );
};

export default Props;