import React from 'react';
import DOM from '../../images/DOM.jpeg';

const VirtualDom = () => {
    return (
        <div>
            <h1>Virtual DOM</h1>
            <div className='content'>
                <h3>Что такое DOM</h3>
                <p>
                    <b>DOM</b> (аббревиатура от Document Object Model) — способ представления структурного документа с помощью
                    объектов. Это кроссплатформенное и языко-независимое соглашение для представления и взаимодействия с
                    данными в HTML, XML и т.д.
                </p>
                <h3>Проблема DOM</h3>
                <p>
                    <b>DOM</b> представляет собой древовидную структуру данных. Поэтому изменения и обновления самого DOM
                    являются достаточно быстрыми. Но после изменения обновленный элемент и все его потомки (дочерние
                    элементы) должны быть повторно отрисованы (отрендерены) для обновления UI приложения. Повторный
                    рендеринг — очень медленный процесс. Таким образом, чем больше у нас компонентов UI, тем более
                    дорогими с точки зрения производительности являются обновления DOM.
                </p>
                <h3>Virtual DOM</h3>
                <p>
                    <b>Virtual DOM</b> - это промежуточное представление <b>DOM</b> в памяти компьютера. React создает виртуальное
                    дерево элементов, которое точно соответствует текущему состоянию компонентов. Затем React сравнивает
                    это виртуальное дерево с реальным <b>DOM</b> и определяет, какие изменения необходимо внести.
                </p>
                <h3>Почему <b>VDOM</b> является более быстрым?</h3>
                <p>
                    Когда в UI добавляются новые элементы, создается <b>VDOM</b> в виде дерева. Каждый элемент является узлом
                    этого дерева. При изменении состояния любого элемента, создается новое дерево. Затем это новое
                    дерево сравнивается (diffed) со старым.
                    <br/>
                    <br/>
                    После этого вычисляется наиболее эффективный метод внесения изменений в RDOM. Цель данных вычислений
                    состоит в минимизации количества операций, совершаемых с RDOM. Тем самым, уменьшаются накладные
                    расходы, связанные с обновлением RDOM.
                </p>
                <img src={`${DOM}`} alt='Virtual DOM'/>
                <h3>Reconciliation</h3>
                <p>
                    <b>Reconciliation</b> - это процесс, при котором React сравнивает предыдущее состояние компонента с новым
                    состоянием и определяет, какие изменения нужно внести в пользовательский интерфейс.
                </p>
                <p>
                    <b>Reconciliation</b> происходит по следующему сценарию:
                </p>
                <ol>
                    <li>
                        <b>Обновление состояния</b>: Когда состояние компонента изменяется, React запускает процесс
                        reconciliation. Он сравнивает предыдущее состояние компонента с новым состоянием, чтобы
                        определить, какие части интерфейса нужно обновить.
                    </li>
                    <br/>
                    <li>
                        <b>Сравнение элементов</b>: React сравнивает элементы, которые представляют компоненты, и их дочерние
                        элементы. Он анализирует их типы, свойства и ключи, чтобы понять, какие элементы нужно обновить,
                        добавить или удалить.
                    </li>
                    <br/>
                    <li>
                        <b>Обновление виртуального DOM</b>: React использует виртуальный DOM (Virtual DOM), который является
                        внутренним представлением интерфейса. Он создает новое виртуальное дерево элементов на основе
                        изменений состояния компонента.
                    </li>
                    <br/>
                    <li>
                        <b>Эффективные обновления</b>: React делает эффективные обновления, минимизируя количество фактических
                        изменений в реальном DOM. Он определяет, какие элементы действительно нужно обновить, и
                        применяет только эти изменения в реальном DOM, чтобы избежать ненужных операций.
                    </li>
                </ol>
            </div>
        </div>
    );
};

export default VirtualDom;