import React from 'react';
import {codeConsumer, codeContextProvider, codeCreateContext, codePropsDrilling, codeUseContext} from "./code_examples";
import Code from "../Code/Code";

const ContextPage = () => {
    return (
        <div>
            <h1>Context (useContext)</h1>
            <div className='content'>
                <p>
                    <b>Context</b> предоставляет способ передачи данных через дерево компонентов без явной передачи
                    пропсов от
                    родительских компонентов к дочерним. Это особенно полезно, когда необходимо передать данные глубоко
                    в иерархии компонентов, избегая "просачивания" пропсов через несколько промежуточных компонентов.
                </p>
                <h3>Какую проблему решает context? (props drilling)</h3>
                <p>
                    В React пропс-дриллинг (props drilling) - это паттерн, который возникает, когда <b>компоненту нужно
                    передать данные через несколько уровней других компонентов</b>. Он возникает, когда компоненты
                    передают
                    свойства (props) другим компонентам, чтобы они могли использовать эти данные.
                </p>
                <p>
                    Пропс-дриллинг может стать проблемой, когда данные нужно передавать через несколько уровней
                    компонентов, и при этом каждый компонент просто перенаправляет свойства следующему компоненту без
                    реального использования этих свойств.
                </p>
                <Code code={codePropsDrilling}/>
                <p>
                    В этом примере значение <b>value</b> передается через несколько компонентов,
                    хотя <b>GrandParentComponent</b> и
                    <b>ParentComponent</b> фактически не использует это значение. Вместо этого оно просто передается
                    через
                    компоненты, чтобы достичь конечного компонента, где оно может быть использовано.
                </p>
                <p>
                    Чтобы избежать проблемы пропс-дриллинга, в React можно использовать более продвинутые паттерны,
                    такие как <b>контекст (context)</b>, который позволяет передавать данные глубже в иерархию
                    компонентов
                    **без явного прокидывания свойств через каждый уровень.
                </p>
                <h3>Использование Context:</h3>
                <p>Для работы с Context в React необходимо выполнить следующие шаги:</p>
                <ol>
                    <li>
                        <b>Создание контекста</b>
                        <p>
                            Сначала мы должны создать контекст с помощью функции <b>createContext()</b> из
                            модуля <b>react</b>
                        </p>
                        <Code code={codeCreateContext}/>
                    </li>
                    <li>
                        <b>Предоставление значения контекста</b>
                        <p>
                            Затем нужно предоставить значение контекста внутри компонента-провайдера.
                            Компонент-провайдер обертывает дерево компонентов, которым нужен доступ к контексту.
                        </p>
                        <Code code={codeContextProvider}/>
                        <p>
                            В этом примере используется <b>MyContext.Provider</b> для предоставления значения контекста.
                            Значение <b>value</b> будет доступно всем дочерним компонентам, которые подписаны на этот
                            контекст.
                        </p>
                    </li>
                    <li>
                        <b>Использование хука useContext</b>
                        <p>
                            Теперь можно использовать хук <b>useContext</b> внутри функционального компонента, чтобы
                            получить
                            доступ к значению контекста.
                        </p>
                        <Code code={codeUseContext}/>
                        <p>
                            В этом примере импортируем <b>useContext</b> из react и вызываем его, передавая
                            контекст <b>MyContext</b>.
                            Хук <b>useContext</b> возвращает текущее значение контекста, которое мы присваиваем
                            переменной <b>value</b>.
                        </p>
                    </li>
                    <li>
                        <b>Подписка на контекст (еще один вариант) </b>
                        <p>
                            Есть еще один вариант подписаться на контекст в компонентах, где нужны переданные значения.
                            Для этого используется <b>MyContext.Consumer</b>
                        </p>
                        <Code code={codeConsumer}/>
                        <p>
                            В этом примере используется <b>MyContext.Consumer</b> для получения значения контекста и
                            отображения его внутри компонента. Значение контекста будет доступно внутри
                            функции-рендерера в виде аргумента.
                        </p>
                    </li>
                </ol>
                <p>
                    <b>Примечание</b>: Если ты используешь React Hooks, такие как <b>useContext</b>, ты можешь извлечь
                    значение
                    контекста с помощью хука useContext(). Это упрощает работу с контекстом и уменьшает необходимость в
                    использовании <b>MyContext.Consumer</b>.
                </p>
                <p>
                    Context в React 18 предоставляет способ передачи данных через компоненты без использования пропсов.
                    Он позволяет легко передавать данные во всем дереве компонентов и упрощает управление состоянием и
                    данными приложения.
                </p>
                <p>
                    Рекомендуется использовать контекст там, где он действительно необходим, например, для глобального состояния приложения или темизации.
                </p>
            </div>
        </div>
    );
};

export default ContextPage;